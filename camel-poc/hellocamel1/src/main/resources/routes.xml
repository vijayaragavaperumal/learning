<!--
  Copyright Â©2002-2018 Skava - All rights reserved.
  All information contained herein is, and remains the property of Skava.
  Skava including, without limitation, all software and other elements thereof,
  are owned or controlled exclusively by Skava and protected by copyright, patent
  and other laws. Use without permission is prohibited.
  Unauthorized copying of this file, via any medium is strictly prohibited
  
  For further information contact Skava at info@skava.com.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
    
    <!-- <bean id="customGlobalExceptionProcessor" class="com.skava.orchestration.processor.CustomGlobalExceptionProcessor"/> -->
    
    <camelContext
        xmlns="http://camel.apache.org/schema/spring"
        messageHistory="{{camel.messagehistory.enabled:true}}" id="orchestrationCamel" trace="{{camel.trace.enabled:false}}">
        <properties>
           <property key="CamelLogDebugBodyMaxChars" value="{{camel.log.debugbodymaxchars:1000}}"/>
        </properties>
        <!-- <errorHandler id="customErrorHandler" type="DefaultErrorHandler" onExceptionOccurredRef="customGlobalExceptionProcessor">
            <redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="5000" disableRedelivery="true"/>
        </errorHandler> -->
        <!--<jmxAgent id="agent" disabled="true"/>-->
        <hystrixConfiguration id="restHystrixConfigs" circuitBreakerEnabled="false"
            executionTimeoutInMilliseconds="20000"
            circuitBreakerSleepWindowInMilliseconds="10000" circuitBreakerForceClosed="true"/>
        <!-- <propertyPlaceholder id="props" location="classpath:sample.properties"/> -->

        <dataFormats>
            <json id="serializer" library="Jackson" />
        </dataFormats>

        <!-- <onException>
            <exception>com.fasterxml.jackson.databind.exc.InvalidFormatException
            </exception>
            <exception>org.apache.camel.component.bean.validator.BeanValidationException
            </exception>
            <exception>org.apache.camel.http.common.HttpOperationFailedException
            </exception>
            <handled>
                <constant>true</constant>
            </handled>
            <process ref="orchestrationErrorHandler" />
            <transform>
                <simple>${body}</simple>
            </transform>
        </onException> -->

        <!-- Swagger documentation API endpoint -->
        <restConfiguration component="servlet"
            host="{{swagger.server.domain}}"
            scheme="{{swagger.server.scheme:http}}"
            port="{{swagger.server.port}}" enableCORS="true"
            bindingMode="json" contextPath="/orchestrationservices/storefront"
            apiContextPath="/v2/api-docs">
            <!-- <endpointProperty key = "headerFilterStrategy" value="#customHeaderFilterStrategy" /> -->
            <apiProperty key="schemes" value="{{swagger.server.scheme:http}}" />
            <apiProperty key="api.title" value="Orchestration Services" />
            <apiProperty key="api.version" value="{{skava.app.version}}" />
            <apiProperty key="api.description"
            value="{{swagger.constant.description}}" />
            <corsHeaders key="Access-Control-Allow-Origin" value="{{skava.accessControl.allowOrigin}}" />
            <corsHeaders key="Access-Control-Allow-Methods" value="{{skava.accessControl.allowMethods}}" />
            <corsHeaders key="Access-Control-Allow-Headers" value="{{skava.accessControl.allowHeaders}}" />
            <corsHeaders key="Access-Control-Max-Age" value="{{skava.accessControl.maxAge}}" />
            <corsHeaders key="Access-Control-Expose-Headers" value="{{skava.accessControl.exposeHeaders}}" />
            <corsHeaders key="Access-Control-Allow-Credentials" value="{{skava.accessControl.allowCredentials}}" />
        </restConfiguration>

        <rest tag="Ping" path="/ping">
            <description>Orchestration Ping API for store front operation</description>
            <get produces="text/plain" outType="java.lang.String" id="ping">
                <description>View Ping Response</description>
                <responseMessage message="Success" code="200"/>
                <to uri="{{skava.route.ping}}" />
            </get>
        </rest>
        <rest tag="Cache" path="/clearCache">
            <description>Orchestration Clear Cache API for store front operation</description>
            <get id="clearCache">
                <description>Clear Cache</description>
                <param name="key" type="query" description="store cache: store-&lt;storeId&gt; cart cache: SFCart-&lt;userId&gt;-&lt;uppercase(CartType)&gt;-&lt;locale>"/>
                <responseMessage message="Ok" code="200"/>
                <route id="clearCacheRoute">
                    <when>
                        <simple>${in.headers.key} != null</simple>
                        <setHeader headerName="CamelRedis.Keys">
                            <simple>{{skava.redis.prefix}}_${in.headers.key}</simple>
                        </setHeader>
                        <to uri="direct:removeCache"/>
                        <log message="Cache clear triggered" loggingLevel="INFO"
                             logName="MainRoute" />
                        <transform>
                            <simple>Ok</simple>
                        </transform>
                    </when>
                </route>
            </get>
        </rest>

        <route id="restOrchestrationPing">
            <from uri="direct:restOrchestrationPing" />
            <log message="ping call triggered" loggingLevel="DEBUG"
                logName="MainRoute" />
            <setHeader headerName="Exchange.CONTENT_TYPE">
                <simple>text/plain</simple>
            </setHeader>
            <transform>
                <simple>Skava Orchestration service ping ${bean:java.lang.System?method=currentTimeMillis}</simple>
            </transform>
        </route>

        <route id="restOrchestrationClientPing">
            <from uri="direct:restOrchestrationClientPing" />
            <log message="ping call triggered" loggingLevel="DEBUG"
                logName="MainRoute" />
            <setHeader headerName="Exchange.CONTENT_TYPE">
                <simple>text/plain</simple>
            </setHeader>
            <transform>
                <simple>Client Orchestration service ping ${bean:java.lang.System?method=currentTimeMillis}</simple>
            </transform>
        </route>
    </camelContext>
</beans>
